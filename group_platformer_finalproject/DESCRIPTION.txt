The game is asking players to collect or avoid something in order to survive and get to the next level.
The mushroom, coin and gem help the player to restore their health and earn more points. 
The bomb, laser and spiders have negative effects on the player's health and points. 
In each level, the player must collect the key and go to the door in order to go to the next level. 
Whenever the player collects something, some music will be played, and when the player lose a life, a ghost will raise from its position. 
Also, the player can mute the music in the game by clicking the music button on the top right. 

-Chris' contribution:
	The majority of my contribution was with the environment and the enemies. I helped make each level's
map interactive by checking for collisions with the player. Also I worked on creating the enemy_group class
and the spider class, as well as checking for collisions between the player and spiders and between the player
and the lasers. The enemy_group class creates an array for holding multiple spider objects while the spider
class creates the spiders and gives them the back and forth movement by defining an X range for them to move
along. The hardest challenge was in collision checking between the player and the metal tiles. This was because
the player didn't fall at a constant speed, but accelerated. This made checking for a specific boundary hard.
Additionally, I made the spider, lasers, and switch csv files to load data into the program.

-Madi's contribution:
<<<<<<< .mine
	I created the bones of the project, with the files so we could properly lay out the game code. I made the sprite, so it went through the pre-made images to move. The Player class was initially created by me, but everyone contributed to it through their own parts. It flips the image when walking backwards and falling backwards. I also completed the double jump, with the fall method to set gravity and the velocity. I worked with Chris to fix the collisions when the sprite fell and jumped, and fixed Riddhi's code for tiles. I created the levels from scratch through the Map class, out the tiles and individually placing them in the application "Tiled." After doing that for visualization, I created a CSV on our google drive with the coordinates of each tile, allowing Qingyue to place items. I also completed the Instructions screen and worked on the Start screen. I used Rectangles to locate where the mouse should click based on the x-axis and y-axis from the image that Riddhi completed. Qingyue wrote the class of item, itemgroup and ghost. All data, including the item types and location are stored in an CSV file, that makes maping items and changing mapping easier. Additionally, key and door are items as well. When the play collect the key or enter the door, certain variable will be trigged to change, and that allows the program to work in order. For example, when the player collects the key on that level, the door will open. If the player get the doow without collecting the key, it will not be able to move to the next level. Furthermore, when the player collects an item, other than the sound, the health and points of the player may varies, and that will be showed by stars or numbers on the top of the screen. Finally, several images of one item are load in turns to make them look like blinking. ||||||| .r142
	I created the bones of the project, with the files so we could properly lay out the game code. I made the sprite, so it went through the pre-made images to move. The Player class was initially created by me, but everyone contributed to it through their own parts. It flips the image when walking backwards and falling backwards. I also completed the double jump, with the fall method to set gravity and the velocity. I worked with Chris to fix the collisions when the sprite fell and jumped, and fixed Riddhi's code for tiles. I created the levels from scratch through the Map class, out the tiles and individually placing them in the application "Tiled." After doing that for visualization, I created a CSV on our google drive with the coordinates of each tile, allowing Qingyue to place items. I also completed the Instructions screen and worked on the Start screen. I used Rectangles to locate where the mouse should click based on the x-axis and y-axis from the image that Riddhi completed. =======
	I created the bones of the project, with the files so we could properly lay out the game code. I made the sprite, so it went through the pre-made images to move. The Player class was initially created by me, but everyone contributed to it through their own parts. It flips the image when walking backwards and falling backwards. I also completed the double jump, with the fall method to set gravity and the velocity. I worked with Chris to fix the collisions when the sprite fell and jumped, and fixed Riddhi's code for tiles. I created the levels from scratch through the Map class, out the tiles and individually placing them in the application "Tiled." After doing that for visualization, I created a CSV on our google drive with the coordinates of each tile, allowing Qingyue to place items. I also completed the Instructions screen and worked on the Start screen. I used Rectangles to locate where the mouse should click based on the x-axis and y-axis from the image that Riddhi completed. 

-Qingyue's contribution:
Qingyue created the flashing items, and the method for the player to collect the items. She also completed the overlay and all the back-end functionality of collecting mushrooms and gems, and hitting the bombs, lasers, and spiders. She also completed the really cool ghost that leaves from the players body if he/she loses a life!Qingyue wrote the class of item, itemgroup and ghost. All data, including the item types and location are stored in an CSV file, that makes maping items and changing mapping easier. Additionally, key and door are items as well. When the play collect the key or enter the door, certain variable will be trigged to change, and that allows the program to work in order. For example, when the player collects the key on that level, the door will open. If the player get the doow without collecting the key, it will not be able to move to the next level. Furthermore, when the player collects an item, other than the sound, the health and points of the player may varies, and that will be showed by stars or numbers on the top of the screen. Finally, several images of one item are load in turns to make them look like blinking. >>>>>>> .r143
